#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
using namespace std;

void show_vector(vector<int> & a_vec)
{
    for (int& x : a_vec)
    {
        cout << x + 1 << " ";
    }
}

int main()
{
    int n, m;
    cin >> n;
    cin >> m;
    const int A = n;
    int m1[m][2], M[A][A];

    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < 2; j++)
            cin >> m1[i][j];
    }
    vector<int> doch(A);
    vector<int> par(A, -1);
    vector<int> used(A, 0);


    int st, go;
    cin >> st >> go;
    --st; --go;

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            M[i][j] = 0;
    }

    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            M[m1[i][0] - 1][m1[i][1] - 1] = 1;
            M[m1[i][1] - 1][m1[i][0] - 1] = 1;
        }
    }

    queue<int> u;
    u.push(st);

    doch[st] = 0;
    used[st] = 1;

    while (!u.empty())
    {
        int val = u.front(); u.pop();

        for (int i = 0; i < A; ++i)
        {
            if (M[val][i] && !used[i])
            {
                doch[i] = doch[val] + 1;
                par[i] = val;
                u.push(i);
                used[i] = true;
            }
        }

    }
    cout << doch[go] << endl;
    vector <int> path;
    for (int i = go; i != -1; i = par[i])
    {
        path.push_back(i);
    }
    reverse(path.begin(), path.end());
    for (int i : path)
    {
        cout << i + 1 << " ";
    }
}
